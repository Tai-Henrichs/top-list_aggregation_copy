import utils

def functionTester(func, tests):
    """
    Generic function for testing other functions.
    --------------------------------
    Params

    func: The function being tested.

    tests: dict
        Entries of the form [tuple1 : tuple2],
        where each entry designates a 
        test to evaluate func.

        tuple1 contains the arguments 
        that should be passed to func
        in order.

        tuple2 contains the following 
        in order: test name as a string, 
        expected output of func.
        Names must be unique!

    Returns: a dictionary where each key 
    is a test name, and each value is 
    a tuple with the test result as a boolean, 
    the value generated by func 
    for the given test, and the expected output.
    """
    results = dict()
    for parameters, testInfo in tests.items():
        output = func(*parameters)

        testName, expectedOutput = testInfo
        if testName not in results:
            success = expectedOutput == output
            results[testName] = (success, output, expectedOutput)
        else:
            print(f"Duplicate name encountered: {testName}")
            return 

    return results

def outputTestResults(results):
    """
    Takes provided test results dictionary
    and prints formatted result information.

    results: dict
        A dictionary of results, as defined by the 
        return definition of functionTester.
    """
    allPassed = True
    for testName, result in results.items():
        success, output, expectedOutput = result 
        if not success:
            print(f"\nFailed {testName}\n"
                  f"Output: {output}\n"
                  f"Expected: {expectedOutput}")
            allPassed = False 
    if allPassed:
        print("All tests passed!")
    else: 
        print("Some tests failed! See output.")

# Suite of tests for testing 
# utility functions.
# Not exhaustive! 
if __name__ == "__main__":
    # Testing kendall_tau
    kendallTests = dict()

    # One
    listOne = (0,1)
    listTwo = (1,0)

    name = "small reflection"
    solution = 1
    kendallTests[(listOne,listTwo)] = (name, solution)

    # Two

    listOne = (0,1,2)
    listTwo = (2,1,0)

    name = "medium reflection"

    # Pairwise disagreements:
    # 0 and 1, 0 and 2, 1 and 2
    solution = 3

    kendallTests[(listOne, listTwo)] = (name, solution)

    # Three

    listOne = (0,1,2,3,4)
    listTwo = (2,4,0,3,1)

    name = "small asymmetry"

    # Pairwise disagreements:
    # 0 and 4, 0 and 2
    # 1 and 2, 1 and 3, 1 and 4
    # 3 and 4
    solution = 6

    kendallTests[(listOne, listTwo)] = (name, solution)

    # Four 

    listOne = (0,1,2,3,4,5,6,9,8,7)
    listTwo = (9,6,4,3,0,2,7,8,1,5)

    name = "medium asymmetry"

    # Pairwise disagreements:
    #
    # Note that 
    # x: a,b = 2
    # means that a and b 
    # are ranked before x 
    # in listTwo when 
    # they are ranked after x 
    # in listOne, and this 
    # contributes 2 
    # pair-wise disagreements
    #
    # 0: 3,4,6,9 = 4
    # 1: 8,7,2,3,4,6,9 = 7
    # 2: 3,4,6,9 = 4
    # 3: 4,6,9 = 3
    # 4: 6,9 = 2
    # 5: 6,9,8,7 = 4
    # 6: 9 = 1
    # 7: = 0
    # 8: 7 = 1
    # 9: = 0
    solution = 4 + 7 + 4 + 3 + 2 + 4 + 1 + 0 + 1 + 0

    kendallTests[(listOne, listTwo)] = (name, solution)

    # Five

    listOne = (3,4,1,0,2)
    listTwo = (4,2,0,3,1)

    name = "small double-asymmetry"

    # Pairwise disagreements:
    # 3: 4,2,0 = 3
    # 4: = 0
    # 1: 2,0 = 2
    # 0: 2 = 1
    # 2: = 0 
    solution = 3 + 0 + 2 + 1 + 0

    kendallTests[(listOne, listTwo)] = (name, solution)

    results = functionTester(utils.kendall_tau, kendallTests)
    outputTestResults(results)


    # Testing generalizedKendallTauDistance